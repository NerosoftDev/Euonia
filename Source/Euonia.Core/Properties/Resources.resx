<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IDS_CANNOT_LOCK_MUTEX_WITH_EXPIRED_STATE" xml:space="preserve">
    <value>Cannot lock mutex with expired state.</value>
  </data>
  <data name="IDS_PARAMETER_CANNOT_NULL_OR_EMPTY" xml:space="preserve">
    <value>{0} can not be null or empty.</value>
  </data>
  <data name="IDS_CAPACITY_MAY_NOT_BE_NEGATIVE" xml:space="preserve">
    <value>Capacity may not be negative.</value>
  </data>
  <data name="IDS_VALUE_CANNOT_BE_NULL" xml:space="preserve">
    <value>Value cannot be null.</value>
  </data>
  <data name="IDS_VALUE_IS_OF_INCORRECT_TYPE" xml:space="preserve">
    <value>Value is of incorrect type.</value>
  </data>
  <data name="IDS_CAPACITY_CANNOT_BE_SET_TO_A_VALUE_LESS_THAN_COUNT" xml:space="preserve">
    <value>Capacity cannot be set to a value less than Count.</value>
  </data>
  <data name="IDS_GIVEN_TYPE_SHOULD_BE_INSTANCE_OF_TYPE" xml:space="preserve">
    <value>Given type ({0}) should be instance of {1}.</value>
  </data>
  <data name="IDS_EXPRESSION_IS_NOT_A_MEMBER_ACCESS_EXPRESSION" xml:space="preserve">
    <value>The expression is not a member access expression.</value>
  </data>
  <data name="IDS_MEMBER_ACCESS_EXPRESSION_DOES_NOT_ACCESS_A_PROPERTY" xml:space="preserve">
    <value>The member access expression does not access a property.</value>
  </data>
  <data name="IDS_NOT_A_LAMBDA_EXPRESSION" xml:space="preserve">
    <value>Not a lambda expression.</value>
  </data>
  <data name="IDS_NOT_A_METHOD_CALL" xml:space="preserve">
    <value>Not a method call.</value>
  </data>
  <data name="IDS_NOT_A_MEMBER_ACCESS" xml:space="preserve">
    <value>Not a member access.</value>
  </data>
  <data name="IDS_DESTINATION_ARRAY_CANNOT_BE_NULL" xml:space="preserve">
    <value>Destination array cannot be null.</value>
  </data>
  <data name="IDS_DESTINATION_ARRAY_IS_OF_INCORRECT_TYPE" xml:space="preserve">
    <value>Destination array is of incorrect type.</value>
  </data>
  <data name="IDS_DESTINATION_ARRAY_MUST_BE_SINGLE_DIMENSIONAL" xml:space="preserve">
    <value>Destination array must be single dimensional.</value>
  </data>
  <data name="IDS_INVALID_COUNT" xml:space="preserve">
    <value>Invalid count {0}.</value>
  </data>
  <data name="IDS_INVALID_EXISTING_INDEX_FOR_SOURCE_LENGTH" xml:space="preserve">
    <value>Invalid existing index {0} for source length {1}.</value>
  </data>
  <data name="IDS_INVALID_NEW_INDEX_FOR_SOURCE_LENGTH" xml:space="preserve">
    <value>Invalid new index {0} for source length {1}.</value>
  </data>
  <data name="IDS_INVALID_OFFSET" xml:space="preserve">
    <value>Invalid offset {0}.</value>
  </data>
  <data name="IDS_INVALID_OFFSET_OR_COUNT_FOR_SOURCE_LENGTH" xml:space="preserve">
    <value>Invalid offset ({0}) or count ({1}) for source length {2}.</value>
  </data>
  <data name="IDS_MAXIMUM_COUNT_CANNOT_BE_LESS_THAN_THE_NUMBER_OF_ELEMENTS_IN_THE_COLLECTION" xml:space="preserve">
    <value>The maximum count cannot be less than the number of elements in the collection.</value>
  </data>
  <data name="IDS_MAXIMUM_COUNT_MUST_BE_GREATER_THAN_ZERO" xml:space="preserve">
    <value>The maximum count must be greater than zero.</value>
  </data>
  <data name="IDS_PARAMETER_CANNOT_NULL_OR_WHITE_SPACE" xml:space="preserve">
    <value>{0} can not be null, empty or white space.</value>
  </data>
  <data name="IDS_PARAMETER_CAN_NOT_BE_NULL" xml:space="preserve">
    <value>{0} can not be null.</value>
  </data>
  <data name="IDS_PARAMETER_IS_NOT_MATCH_WITH_PATTERN" xml:space="preserve">
    <value>{0} is not match with {1}.</value>
  </data>
  <data name="IDS_PARAMETER_LENGTH_MUST_BE_EQUAL_OR_GREATER_THAN" xml:space="preserve">
    <value>{0} length must be equal to or greater than {1}.</value>
  </data>
  <data name="IDS_PARAMETER_LENGTH_MUST_BE_EQUAL_OR_LOWER_THAN" xml:space="preserve">
    <value>{0} length must be equal to or lower than {1}.</value>
  </data>
</root>